function simulate_system()

    %% Definte fixed paramters
    mc = 0;                 Ic = 0;
    m0 = 0;                 I0= 0;
    ms = 0;                 Is = 0;
    m1 =.0393 + .2;         I1 = 25.1 * 10^-6;         
    m2 =.0368;              I2 = 53.5 * 10^-6;
    m3 = .00783;            I3 = 9.25 * 10^-6;       
    m4 = .0155;             I4 = 22.176 * 10^-6;
    m5 = 0;                 I5= 0;
    c_00 = 0;
    c_AM = 0;
    c_B1 = 0;
    c_C2 = 0;
    c_D3 =0;
    c_E4 = 0;
    c_G5 =0;
    
    l_0A=.011;              l_CE=.042; 
    l_AB=.096;              l_DF=.091;
    l_BC=0.032;           l_EF=0.0344; 
    l_BD=0.0622;          l_EG=0.0610;
    l_5=0.0610;            l_heela = 0.05;
    l_GH=0.0810;           l_IG = 0.02;
    
    N = 18.75;
    Ir = 0.0035/N^2;
    g = 9.81; 
    k = 0;
    
    %% Parameter vector
    p   = [mc m0 ms m1 m2 m3 m4 m5  Ic I0 Is I1 I2 I3 I4 I5 c_00 c_AM c_B1 c_C2 c_D3 c_E4 c_G5 l_0A l_AB l_BC l_BD l_CE l_DF l_EF l_EG l_5 l_GH g]';
    
    %% Perform Dynamic simulation
    dt = 0.001;
    tf = 10;
    num_step = floor(tf/dt);
    tspan = linspace(0, tf, num_step); 
    z0 = [-pi/4; pi/2; 0; 0];
    z_out = zeros(4,num_step);
    z_out(:,1) = z0;
    for i=1:num_step-1
        dz = dynamics(tspan(i), z_out(:,i), p);
        z_out(3:4,i+1) = z_out(3:4,i) + dz(3:4)*dt;
        z_out(1:2,i+1) = z_out(1:2,i) + z_out(3:4,i+1)*dt;
    end

    %% Compute Energy
    E = energy_leg(z_out,p);
    figure(1); clf
    plot(tspan,E);xlabel('Time (s)'); ylabel('Energy (J)');
    
    %% Compute foot position over time
    rE = zeros(3,length(tspan));
    for i = 1:length(tspan)
        rE(:,i) = position_foot(z_out(:,i),p);
    end
    figure(2); clf;
    plot(tspan,rE(1:2,:))
    xlabel('Time (s)'); ylabel('Position (m)'); legend({'x','y'});
    
    %hold on
    %w = 3;
    %Ed = [0.025*cos(w*tspan); -0.125+0.025*sin(w*tspan)];
    %plot(tspan,Ed(1:2,:))
    %% Animate Solution
    figure(3); clf;
    hold on
   
    %% Optional, plot foot target information
    
    % target position Q1.4
    plot(.025 , -.125, 'r.','MarkerSize',6); 
    
    % Target traj. Q 1.6
    %plot( .025*cos(0:.01:2*pi), -.125+.025*sin(0:.01:2*pi),'k--'); 
    
    % Ground Q2.3
    %plot([-.2 .2],[-.125 -.125],'k'); 
    
    animateSol(tspan,z_out,p);
end

function tau = control_law(t,z,p)
    % Controller gains, Update as necessary for Problem 1
    K_x = 40; % Spring stiffness X
    K_y = 40; % Spring stiffness Y
    D_x = 4;  % Damping X
    D_y = 4;  % Damping Y
    rEd = [.025 -.125 0]'; % Desired position of foot
    w = 3;
    
    %% STEPS TO COMPLETE PROBLEM 1.3
    % a. Compute r_E
   rE = position_foot(z,p);
    % b. Compute J, the jacobian of r_E
   jE = jacobian_foot(z,p);
    % c. Use these results to compute \tau as specified in the write-up
   V_virt= 1/2*K_x*(rE(1)-rEd(1))^2+1/2*K_y*(rE(2)-rEd(2))^2;
    % Hint: Some of the functions generated by derive_leg will help with 
    % steps a and b.
   vF = velocity_foot(z,p);
   %rEd = [0.025*cos(w*t); -0.125+0.025*sin(w*t)];
   rEd = [0;-3.14/2];
   
   tau = -transpose(jE)*[K_x*(rE(1)-rEd(1))+D_x*vF(1);K_y*(rE(2)-rEd(2))+D_y*vF(2);0];  %DAMPING
end


function Fc = contact_force(z,p)

    %% Fixed parameters for contact
    K_c = 100;
    D_c = 2;
    yC  = -.125;
    
    %% STEPS TO COMPLETE PROBLEM 2.1
    % a. Compute constraint C which gives height of foot relative to ground
    % b. Compute constraint rate, \dot{C}
    % c. Set Fc based on compliant contact model
    % d. If foot is above the ground, or Fc<0, set Fc = 0
    
    % Hint: Some of the functions generated by derive_leg will help with 
    % steps a and b.
    rE = position_foot(z,p)
    vF = velocity_foot(z,p);
    
    C = rE(2)-yC;
    C_dot = vF(2);
   
    if C>0
        Fc = 0;
    else
        Fc = -K_c*C-D_c*C_dot; % replace this line using steps a-d to compute Fc
    end
end


function Tauc = joint_limit_torque(z,p)
    %% Fixed parameters for rotational spring damper at joint limit contact
    Kappa_c = 10;
    Dampa_c = 0.2;

    Tauc = 0;
end


function dz = dynamics(t,z,p)
    th1 = z(1);     th2 = z(2);
    dth1= z(3);     dth2= z(4);
    
    % Get mass matrix
    A = A_leg(z,p);
    
    % Compute Controls
    tau = control_law(t,z,p);
    
    % Get b = Q - V(q,qd) - G(q)
    b = b_leg(z,tau,p);
  
    % Compute the contact force (used for problem 2)
    Fc = contact_force(z,p);
   
    J = jacobian_foot(z,p)
    % Compute the contribution of the contact force to the generalied force
    QFc= transpose(J)*[0;Fc;0];  %% YOUR CODE HERE for Q2.2
    %QFc = [0;0];

    % Compute the contact force (used for problem 2.5)
    Tauc = joint_limit_torque(z,p);
    QTauc= [0; 0];
    
    % Solve for qdd.
    qdd = A\(b + QFc + QTauc);
    dz = 0*z;
    
    % Form dz
    dz(1:2) = z(3:4);
    dz(3:4) = qdd;
end

function animateSol(tspan, x,p)
    % Prepare plot handles
    hold on
    h_OB = plot([0],[0],'LineWidth',2);
    h_AC = plot([0],[0],'LineWidth',2);
    h_BD = plot([0],[0],'LineWidth',2);
    h_CE = plot([0],[0],'LineWidth',2);
   
    
    xlabel('x'); ylabel('y');
    h_title = title('t=0.0s');
    
    axis equal
    axis([-.2 .2 -.3 .1]);

    %Step through and update animation
    for i = 1:length(tspan)
        % skip frame.
        if mod(i,10)
            continue;
        end
        t = tspan(i);
        z = x(:,i); 
        keypoints = keypoints_leg(z,p);

        rcart = keypoints(:,1); % Vector to base of cart
        rA = keypoints(:,2);
        r_AB = keypoints(:,3); % Vector to tip of pendulum
        r_BC = keypoints(:,4);
        r_BD = keypoints(:,5);
        r_CE = keypoints(:,6);
        r_DF = keypoints(:,7);
        r_EG = keypoints(:,8);
        r_GH = keypoints(:,9);
    
         %keypoints = [rcart(1:2) rA(1:2) r_AB(1:2) r_BC(1:2) r_BD(1:2) r_CE(1:2) r_DF(1:2) r_EG(1:2) r_GH(1:2)]; %endpoints, ankle attachment point (anywhere you need lines) 

        
        set(h_title,'String',  sprintf('t=%.2f',t) ); % update title
        
        set(h_OB,'XData',[0 rB(1)]);
        set(h_OB,'YData',[0 rB(2)]);
        
        set(h_AC,'XData',[rA(1) rC(1)]);
        set(h_AC,'YData',[rA(2) rC(2)]);
        
        set(h_BD,'XData',[rB(1) rD(1)]);
        set(h_BD,'YData',[rB(2) rD(2)]);
        
        set(h_CE,'XData',[rC(1) rE(1)]);
        set(h_CE,'YData',[rC(2) rE(2)]);

        pause(.01)
    end
end